{"ast":null,"code":"var _jsxFileName = \"/home/pedro/Trybe/projetos_trybe/sd-012-project-starwars-planets-search/src/components/SortingColumns.jsx\";\nimport React, { useEffect, useContext, useState } from 'react';\nimport ContextApi from '../context/ContextApi';\nexport default function SortingColumns() {\n  const columnsOptions = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n  const {\n    dataFilter,\n    setDataFilter,\n    filters,\n    setFilters\n  } = useContext(ContextApi);\n  const {\n    column,\n    sort\n  } = filters.order;\n  const [orderValues, setOrderValues] = useState({\n    column: 'name',\n    sort: 'ASC'\n  });\n\n  const sortData = data => {\n    switch (sort) {\n      case 'ASC':\n        return data.sort(({\n          [column]: a\n        }, {\n          [column]: b\n        }) => a.localeCompare(b)).sort((a, b) => a[column] - b[column]);\n\n      case 'DESC':\n        return data.sort(({\n          [column]: a\n        }, {\n          [column]: b\n        }) => b.localeCompare(a)).sort((a, b) => b[column] - a[column]);\n\n      default:\n        return data;\n    }\n  };\n\n  useEffect(() => {\n    sortData();\n  });\n\n  const renderSorted = () => {\n    setFilters({ ...filters,\n      order: {\n        column,\n        sort\n      }\n    });\n  };\n\n  const handleSort = ({\n    target: {\n      name,\n      value\n    }\n  }) => {\n    setOrderValues({ ...orderValues,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    \"data-testid\": \"column-sort\",\n    onChange: ({\n      target: {\n        value\n      }\n    }) => setColumn(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, columnsOptions.map(option => /*#__PURE__*/React.createElement(\"option\", {\n    key: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 43\n    }\n  }, option))), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"ASC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Crescente\", /*#__PURE__*/React.createElement(\"input\", {\n    \"data-testid\": \"column-sort-input-asc\",\n    id: \"ASC\",\n    type: \"radio\",\n    value: \"ASC\",\n    name: \"sort-btn\",\n    onChange: handleSort,\n    checked: orderValues.sort === 'ASC',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"DESC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Decrescente\", /*#__PURE__*/React.createElement(\"input\", {\n    \"data-testid\": \"column-sort-input-desc\",\n    id: \"DESC\",\n    type: \"radio\",\n    value: \"DESC\",\n    name: \"sort-btn\",\n    onChange: handleSort,\n    checked: orderValues.sort === 'DESC',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    \"data-testid\": \"column-sort-button\",\n    type: \"button\",\n    onClick: renderSorted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Sort\"));\n}","map":{"version":3,"sources":["/home/pedro/Trybe/projetos_trybe/sd-012-project-starwars-planets-search/src/components/SortingColumns.jsx"],"names":["React","useEffect","useContext","useState","ContextApi","SortingColumns","columnsOptions","dataFilter","setDataFilter","filters","setFilters","column","sort","order","orderValues","setOrderValues","sortData","data","a","b","localeCompare","renderSorted","handleSort","target","name","value","setColumn","map","option"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from 'react';\nimport ContextApi from '../context/ContextApi';\n\nexport default function SortingColumns() {\n  const columnsOptions = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  const { dataFilter, setDataFilter, filters, setFilters } = useContext(ContextApi);\n  const { column, sort } = filters.order;\n  const [orderValues, setOrderValues] = useState({ column: 'name', sort: 'ASC' });\n\n  const sortData = (data) => {\n    switch (sort) {\n    case 'ASC':\n      return data\n        .sort(({ [column]: a }, { [column]: b }) => a.localeCompare(b))\n        .sort((a, b) => (a[column] - b[column]));\n    case 'DESC':\n      return data\n        .sort(({ [column]: a }, { [column]: b }) => b.localeCompare(a))\n        .sort((a, b) => b[column] - a[column]);\n    default:\n      return data;\n    }\n  };\n\n  useEffect(() => {\n    sortData();\n  });\n\n  const renderSorted = () => {\n    setFilters({\n      ...filters,\n      order: {\n        column,\n        sort,\n      },\n    });\n  };\n\n  const handleSort = ({ target: { name, value } }) => {\n    setOrderValues({ ...orderValues, [name]: value });\n  };\n\n  return (\n    <form>\n      <select\n        data-testid=\"column-sort\"\n        onChange={ ({ target: { value } }) => setColumn(value) }\n      >\n        {\n          columnsOptions.map((option) => (<option key={ option }>{option}</option>))\n        }\n      </select>\n      <label htmlFor=\"ASC\">\n        Crescente\n        <input\n          data-testid=\"column-sort-input-asc\"\n          id=\"ASC\"\n          type=\"radio\"\n          value=\"ASC\"\n          name=\"sort-btn\"\n          onChange={ handleSort }\n          checked={ orderValues.sort === 'ASC' }\n        />\n      </label>\n      <label htmlFor=\"DESC\">\n        Decrescente\n        <input\n          data-testid=\"column-sort-input-desc\"\n          id=\"DESC\"\n          type=\"radio\"\n          value=\"DESC\"\n          name=\"sort-btn\"\n          onChange={ handleSort }\n          checked={ orderValues.sort === 'DESC' }\n        />\n      </label>\n      <button\n        data-testid=\"column-sort-button\"\n        type=\"button\"\n        onClick={ renderSorted }\n      >\n        Sort\n      </button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}