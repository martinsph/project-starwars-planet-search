{"ast":null,"code":"var _jsxFileName = \"/home/pedro/Trybe/projetos_trybe/sd-012-project-starwars-planets-search/src/components/SortingColumns.jsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport ContextApi from '../context/ContextApi';\nexport default function SortingColumns() {\n  const columnsOptions = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n  const {\n    data,\n    setData,\n    filters,\n    setFilters\n  } = useContext(ContextApi);\n  const [column, setColumn] = useState('population');\n  const [sort, setSort] = useState('ASC');\n\n  const sortColumn = () => {\n    if (order !== {\n      column: 'name',\n      sort: 'ASC'\n    }) {\n      data.sort((a, b) => {\n        switch (sort) {\n          case 'ASC':\n            return parseInt(a[order.column], 10) - parseInt(b[order.column], 10);\n\n          case 'DESC':\n            return parseInt(b[order.column], 10) - parseInt(a[order.column], 10);\n\n          default:\n            return 0;\n        }\n      });\n    }\n\n    return setData(data);\n  };\n\n  useEffect(() => {\n    sortColumn();\n  });\n\n  const renderSorted = () => {\n    setFilters({ ...filters,\n      order: {\n        column,\n        sort\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    \"data-testid\": \"column-sort\",\n    onChange: ({\n      target: {\n        value\n      }\n    }) => setColumn(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, columnsOptions.map(option => /*#__PURE__*/React.createElement(\"option\", {\n    key: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 43\n    }\n  }, option))), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"ASC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Crescente\", /*#__PURE__*/React.createElement(\"input\", {\n    \"data-testid\": \"column-sort-input-asc\",\n    id: \"ASC\",\n    type: \"radio\",\n    value: \"ASC\",\n    onChange: ({\n      target: {\n        value\n      }\n    }) => setSort(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"DESC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Decrescente\", /*#__PURE__*/React.createElement(\"input\", {\n    \"data-testid\": \"column-sort-input-desc\",\n    id: \"DESC\",\n    type: \"radio\",\n    value: \"DESC\",\n    onChange: ({\n      target: {\n        value\n      }\n    }) => setSort(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    \"data-testid\": \"column-sort-button\",\n    type: \"button\",\n    onClick: renderSorted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Ordenar\"));\n}","map":{"version":3,"sources":["/home/pedro/Trybe/projetos_trybe/sd-012-project-starwars-planets-search/src/components/SortingColumns.jsx"],"names":["React","useState","useEffect","useContext","ContextApi","SortingColumns","columnsOptions","data","setData","filters","setFilters","column","setColumn","sort","setSort","sortColumn","order","a","b","parseInt","renderSorted","target","value","map","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport ContextApi from '../context/ContextApi';\n\nexport default function SortingColumns() {\n  const columnsOptions = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  const { data, setData, filters, setFilters } = useContext(ContextApi);\n  const [column, setColumn] = useState('population');\n  const [sort, setSort] = useState('ASC');\n\n  const sortColumn = () => {\n    if (order !== { column: 'name', sort: 'ASC' }) {\n      data.sort((a, b) => {\n        switch (sort) {\n        case 'ASC':\n          return parseInt(a[order.column], 10) - parseInt(b[order.column], 10);\n        case 'DESC':\n          return parseInt(b[order.column], 10) - parseInt(a[order.column], 10);\n        default:\n          return 0;\n        }\n      });\n    }\n    return setData(data);\n  };\n\n  useEffect(() => {\n    sortColumn();\n  });\n\n  const renderSorted = () => {\n    setFilters({\n      ...filters,\n      order: {\n        column,\n        sort,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <select\n        data-testid=\"column-sort\"\n        onChange={ ({ target: { value } }) => setColumn(value) }\n      >\n        {\n          columnsOptions.map((option) => (<option key={ option }>{option}</option>))\n        }\n      </select>\n      <label htmlFor=\"ASC\">\n        Crescente\n        <input\n          data-testid=\"column-sort-input-asc\"\n          id=\"ASC\"\n          type=\"radio\"\n          value=\"ASC\"\n          onChange={ ({ target: { value } }) => setSort(value) }\n        />\n      </label>\n      <label htmlFor=\"DESC\">\n        Decrescente\n        <input\n          data-testid=\"column-sort-input-desc\"\n          id=\"DESC\"\n          type=\"radio\"\n          value=\"DESC\"\n          onChange={ ({ target: { value } }) => setSort(value) }\n        />\n      </label>\n      <button\n        data-testid=\"column-sort-button\"\n        type=\"button\"\n        onClick={ renderSorted }\n      >\n        Ordenar\n      </button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}